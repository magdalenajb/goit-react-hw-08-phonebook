{"version":3,"file":"static/js/137.5e092d0a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactAddForm\":\"ContactForm_contactAddForm__h-+WW\",\"contactAddLabel\":\"ContactForm_contactAddLabel__zYesn\",\"contactAddInput\":\"ContactForm_contactAddInput__MlXun\",\"contactAddBtn\":\"ContactForm_contactAddBtn__uYWWc\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.filter.filter;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport c from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n\n    const data = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    const isItUniqueName = contacts.find(\n      contact => contact.name.toLowerCase() === data.name.toLowerCase()\n    );\n    if (isItUniqueName) {\n      return alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact(data));\n      resetForm();\n    }\n  };\n\n  const handleChange = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        return setName(e.currentTarget.value);\n      case 'number':\n        return setNumber(e.currentTarget.value);\n      default:\n        return;\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={c.contactAddForm} onSubmit={handleOnSubmit}>\n      \n      <label className={c.contactAddLabel}>\n        Name\n        <input\n          className={c.contactAddInput}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter Name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <label className={c.contactAddLabel}>\n        Number\n        <input\n          className={c.contactAddInput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"Enter Phone Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <button className={c.contactAddBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListItem\":\"ContactList_contactListItem__3th7-\",\"contactListBtn\":\"ContactList_contactListBtn__iwQAv\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport c from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const removeContact = id => {\n    return dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul className={c.contactList}>\n      {contacts\n        .filter(e => e.name.toLowerCase().includes(filter.toLowerCase()))\n        .map(contact => {\n          return (\n            <li className={c.contactListItem} key={contact.id}>\n              <p>{contact.name}</p>\n              <p>{contact.number}</p>\n              <button\n                className={c.contactListBtn}\n                key={contact.id}\n                name={contact.name}\n                type=\"submit\"\n                onClick={() => removeContact(contact.id)}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterAction } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport c from './Filter.module.css';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const findContact = e => {\n    dispatch(filterAction(e.currentTarget.value));\n  };\n\n  return (\n    <label className={c.filterLabel}>\n      <p className={c.filterTitle}>Find contacts by Name</p>\n      <input\n        className={c.filterInput}\n        value={filter}\n        name=\"filter\"\n        onChange={findContact}\n        type=\"input\"\n        placeholder=\"Enter Looking Name\"\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n","import { Helmet } from 'react-helmet';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","resetForm","className","c","onSubmit","preventDefault","data","find","contact","toLowerCase","alert","addContact","type","placeholder","pattern","title","required","onChange","ContactList","includes","map","onClick","deleteContact","Filter","filterAction","useEffect","fetchContacts","Helmet"],"sourceRoot":""}